diff --git a/hipamd/src/hip_graph_internal.cpp b/hipamd/src/hip_graph_internal.cpp
index 4f074ece4..e878505bd 100644
--- a/hipamd/src/hip_graph_internal.cpp
+++ b/hipamd/src/hip_graph_internal.cpp
@@ -988,9 +988,17 @@ void GraphKernelArgManager::ReadBackOrFlush() {
       address dev_ptr =
           kernarg_graph_.back().kernarg_pool_addr_ + kernarg_graph_.back().kernarg_pool_size_;
       auto kSentinel = *reinterpret_cast<volatile unsigned char*>(dev_ptr - 1);
+#if defined(__x86_64__)
       _mm_sfence();
+#else
+      asm("dbar 0");
+#endif
       *(dev_ptr - 1) = kSentinel;
+#if defined(__x86_64__)
       _mm_mfence();
+#else
+      asm("dbar 0");
+#endif
       kSentinel = *reinterpret_cast<volatile unsigned char*>(dev_ptr - 1);
     }
   }
diff --git a/rocclr/device/rocm/rocvirtual.cpp b/rocclr/device/rocm/rocvirtual.cpp
index 878e591d6..e3ceb75e4 100644
--- a/rocclr/device/rocm/rocvirtual.cpp
+++ b/rocclr/device/rocm/rocvirtual.cpp
@@ -3280,9 +3280,18 @@ bool VirtualGPU::submitKernelInternal(const amd::NDRangeContainer& sizes,
           auto kSentinel = *reinterpret_cast<volatile int*>(dev().info().hdpMemFlushCntl);
         } else if (kernArgImpl == KernelArgImpl::DeviceKernelArgsReadback &&
                    argSize != 0) {
+#if defined(__x86_64__)
           _mm_sfence();
+#else
+          asm("dbar 0");
+#endif
           *(argBuffer + argSize - 1) = *(parameters + argSize - 1);
+#if defined(__x86_64__)
           _mm_mfence();
+#else
+          asm("dbar 0");
+#endif
+
           auto kSentinel = *reinterpret_cast<volatile unsigned char*>(
               argBuffer + argSize - 1);
         }
diff --git a/rocclr/os/os.hpp b/rocclr/os/os.hpp
index 8509cc362..d9c2edb56 100644
--- a/rocclr/os/os.hpp
+++ b/rocclr/os/os.hpp
@@ -358,6 +358,9 @@ ALWAYSINLINE address Os::currentStackPtr() {
 #elif defined(ATI_ARCH_ARM)
       "mov %0,sp"
       : "=r"(value)
+#elif defined(__loongarch_lp64)
+      "addi.d %0,$sp,0"
+      : "=r"(value)
 #else
       ""
 #endif
