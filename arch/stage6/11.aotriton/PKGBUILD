source ../../env/env.sh
pkgbase='rocm-aotriton'
pkgname=('rocm-aotriton')
pkgdesc=""

AOTRITON_VERSION=0.4.2b
source=(
    "git+https://github.com/ROCm/aotriton.git#tag=$AOTRITON_VERSION"
    "git+https://github.com/facebook/zstd.git#tag=v1.5.5-kernel"
    "llvm.patch"
)
ROCM_VERSION=$pkgver
ROCM_HOME=$ROCM_ROOT
arch=('loong64' 'x86_64')

license=('MIT')
b2sums=('SKIP' 'SKIP' 'SKIP')

prepare() {
    cd aotriton
        git submodule update --init --recursive
    cd ..
    
    [ ! -d "llvm-project" ] && git clone https://github.com/llvm/llvm-project
    cd llvm-project
        git reset --hard
        cat ../aotriton/third_party/triton/llvm-hash.txt | xargs git checkout -f
        git apply ../llvm.patch
    cd ..
}
build() {
    [ ! -d "zstd-build" ] && mkdir zstd-build
    cd zstd-build
      EXT_CFLAGS="-pipe"
      EXT_CFLAGS="-mcmodel=extreme $EXT_CFLAGS"
      cmake ../zstd/build/cmake -G Ninja \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_C_COMPILER=${LLVM_DIR}/bin/clang \
        -DCMAKE_CXX_COMPILER=${LLVM_DIR}/bin/clang++ \
        -DCMAKE_C_FLAGS="$EXT_CFLAGS" \
        -DCMAKE_CXX_FLAGS="$EXT_CFLAGS" \
        -DCMAKE_CXX_FLAGS="$EXT_CFLAGS" \
        -DCMAKE_INSTALL_PREFIX="$PWD/../zstd-usr" \
        -DZSTD_USE_STATIC_RUNTIME=ON \
        -DZSTD_BUILD_STATIC=ON \
        -DZSTD_BUILD_TESTS=ON \
        -DZSTD_BUILD_SHARED=OFF \
        -DZSTD_LEGACY_SUPPORT=ON
      ninja 
      ninja install
    cd ..
    [ ! -d "build-env" ] && python${python_used_version} -m venv build-env
    source build-env/bin/activate
    pip install numpy
    [ ! -d "llvm-build" ] && mkdir llvm-build
    cd llvm-build
      EXT_CFLAGS="-pipe"
      EXT_CFLAGS="-mcmodel=extreme $EXT_CFLAGS"
      cmake -GNinja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_COMPILER=${LLVM_DIR}/bin/clang \
        -DCMAKE_CXX_COMPILER=${LLVM_DIR}/bin/clang++ \
        -DCMAKE_C_FLAGS="$EXT_CFLAGS" \
        -DCMAKE_CXX_FLAGS="$EXT_CFLAGS" \
        -DCMAKE_INSTALL_PREFIX="$PWD/../llvm-usr" \
        -DLLVM_BUILD_UTILS=ON \
        -DLLVM_BUILD_TOOLS=ON \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
        -DLLVM_ENABLE_PROJECTS="mlir;clang" \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_TARGETS_TO_BUILD="host;NVPTX;AMDGPU" \
        ../llvm-project/llvm
      ninja
      ninja install
    cd ..
    cd aotriton
      mkdir build
      cd build
      
    false

}

check() {
  echo
}

#packaging() {
#
#}
package() {
  cd build
}
