diff --git a/aten/src/ATen/cpu/Utils.cpp b/aten/src/ATen/cpu/Utils.cpp
index 60ad78143f..aa13e83314 100644
--- a/aten/src/ATen/cpu/Utils.cpp
+++ b/aten/src/ATen/cpu/Utils.cpp
@@ -1,6 +1,6 @@
 #include <cassert>
 #include <ATen/cpu/Utils.h>
-#if !defined(__s390x__ ) && !defined(__powerpc__)
+#if !defined(__s390x__ ) && !defined(__powerpc__) && !defined(__loongarch_lp64)
 #include <cpuinfo.h>
 #endif
 #if defined(__linux__)
@@ -10,7 +10,7 @@
 
 namespace at::cpu {
 bool is_avx2_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_avx2();
 #else
   return false;
@@ -18,7 +18,7 @@ bool is_avx2_supported() {
 }
 
 bool is_avx512_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_avx512f() && cpuinfo_has_x86_avx512vl() && cpuinfo_has_x86_avx512bw() && cpuinfo_has_x86_avx512dq();
 #else
   return false;
@@ -26,7 +26,7 @@ bool is_avx512_supported() {
 }
 
 bool is_avx512_vnni_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_avx512vnni();
 #else
   return false;
@@ -34,7 +34,7 @@ bool is_avx512_vnni_supported() {
 }
 
 bool is_avx512_bf16_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_avx512bf16();
 #else
   return false;
@@ -42,7 +42,7 @@ bool is_avx512_bf16_supported() {
 }
 
 bool is_amx_tile_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_amx_tile();
 #else
   return false;
@@ -85,7 +85,7 @@ bool init_amx() {
 }
 
 bool is_arm_sve_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_arm_sve();
 #else
   return false;
@@ -93,7 +93,7 @@ bool is_arm_sve_supported() {
 }
 
 static uint32_t get_cache_size(int level) {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   if (!cpuinfo_initialize()) {
     return 0;
   }
diff --git a/aten/src/ATen/native/transformers/hip/aotriton_adapter.h b/aten/src/ATen/native/transformers/hip/aotriton_adapter.h
index 57d5c34444..8d6f73895a 100644
--- a/aten/src/ATen/native/transformers/hip/aotriton_adapter.h
+++ b/aten/src/ATen/native/transformers/hip/aotriton_adapter.h
@@ -2,8 +2,8 @@
 
 #ifdef USE_ROCM
 
-#include <aotriton/dtypes.h>
-#include <aotriton/util.h>
+#include "/home/xinmu/rocm/rocm-loongarch/stage6/aotriton/aotriton-usr/include/aotriton/dtypes.h"
+#include "/home/xinmu/rocm/rocm-loongarch/stage6/aotriton/aotriton-usr/include/aotriton/util.h"
 
 ////////////////////////////////////////////////////////////////////////////////
 // Common macros copied from cuda/mem_eff_attention/gemm_kernel_utils.h
diff --git a/c10/cuda/CUDADeviceAssertion.h b/c10/cuda/CUDADeviceAssertion.h
index 063c783693..a0f922744e 100644
--- a/c10/cuda/CUDADeviceAssertion.h
+++ b/c10/cuda/CUDADeviceAssertion.h
@@ -90,7 +90,7 @@ static __device__ void dsa_add_new_assertion_failure(
     }                                                                    \
   } while (false)
 #else
-#define CUDA_KERNEL_ASSERT2(condition) assert(condition)
+#define CUDA_KERNEL_ASSERT2(condition)
 #endif
 
 } // namespace c10::cuda
diff --git a/c10/macros/Macros.h b/c10/macros/Macros.h
index 01e71c88e7..38438f2e2c 100644
--- a/c10/macros/Macros.h
+++ b/c10/macros/Macros.h
@@ -352,7 +352,7 @@ constexpr uint32_t CUDA_THREADS_PER_BLOCK_FALLBACK = 256;
 // CUDA_KERNEL_ASSERT checks the assertion
 // even when NDEBUG is defined. This is useful for important assertions in CUDA
 // code that would otherwise be suppressed when building Release.
-#if defined(__ANDROID__) || defined(__APPLE__) || defined(__FreeBSD__)
+#if defined(__ANDROID__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(USE_ROCM)
 // Those platforms do not support assert()
 #define CUDA_KERNEL_ASSERT(cond)
 #define CUDA_KERNEL_ASSERT_MSG(cond, msg)
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 7ef8eabb51..52f2654c4c 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -1049,7 +1049,7 @@ if(USE_ROCM)
       caffe2_update_option(USE_SYSTEM_NCCL ON)
     endif()
 
-    list(APPEND HIP_CXX_FLAGS -fPIC)
+    list(APPEND HIP_CXX_FLAGS -fPIC -mcmodel=extreme)
     list(APPEND HIP_CXX_FLAGS -D__HIP_PLATFORM_AMD__=1)
     list(APPEND HIP_CXX_FLAGS -DCUDA_HAS_FP16=1)
     list(APPEND HIP_CXX_FLAGS -DUSE_ROCM)
@@ -1061,7 +1061,6 @@ if(USE_ROCM)
     list(APPEND HIP_CXX_FLAGS -Wno-duplicate-decl-specifier)
     list(APPEND HIP_CXX_FLAGS -DCAFFE2_USE_MIOPEN)
     list(APPEND HIP_CXX_FLAGS -DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_HIP)
-    list(APPEND HIP_CXX_FLAGS -std=c++17)
     list(APPEND HIP_CXX_FLAGS -DHIPBLAS_V2)
     if(HIP_NEW_TYPE_ENUMS)
       list(APPEND HIP_CXX_FLAGS -DHIP_NEW_TYPE_ENUMS)
@@ -1082,6 +1081,7 @@ if(USE_ROCM)
     set(HIP_CLANG_FLAGS ${HIP_CXX_FLAGS})
     # Ask hcc to generate device code during compilation so we can use
     # host linker to link.
+    list(APPEND HIP_CLANG_FLAGS -mprintf-kind=buffered)
     list(APPEND HIP_CLANG_FLAGS -fno-gpu-rdc)
     foreach(pytorch_rocm_arch ${PYTORCH_ROCM_ARCH})
       list(APPEND HIP_CLANG_FLAGS --offload-arch=${pytorch_rocm_arch})
@@ -1664,7 +1664,7 @@ if(USE_KINETO)
 
   if(NOT LIBKINETO_NOROCTRACER)
     if("$ENV{ROCM_SOURCE_DIR}" STREQUAL "")
-      set(ENV{ROCM_SOURCE_DIR} "/opt/rocm")
+      set(ENV{ROCM_SOURCE_DIR} "/opt/rocm-6.2.2")
     endif()
   endif()
 
diff --git a/cmake/External/aotriton.cmake b/cmake/External/aotriton.cmake
index d9d99959f3..d8be0ac7ec 100644
--- a/cmake/External/aotriton.cmake
+++ b/cmake/External/aotriton.cmake
@@ -16,7 +16,7 @@ if(NOT __AOTRITON_INCLUDED)
     file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/.ci/docker/aotriton_version.txt" __AOTRITON_CI_INFO)
     list(GET __AOTRITON_CI_INFO 3 __AOTRITON_CI_COMMIT)
     ExternalProject_Add(aotriton_external
-      GIT_REPOSITORY https://github.com/ROCm/aotriton.git
+      GIT_REPOSITORY http://static.xinmu.moe/gh/https://github.com/ROCm/aotriton.git
       GIT_TAG ${__AOTRITON_CI_COMMIT}
       PREFIX ${__AOTRITON_EXTERN_PREFIX}
       INSTALL_DIR ${__AOTRITON_INSTALL_DIR}
diff --git a/cmake/public/LoadHIP.cmake b/cmake/public/LoadHIP.cmake
index 9d4565b090..c7a6e8729d 100644
--- a/cmake/public/LoadHIP.cmake
+++ b/cmake/public/LoadHIP.cmake
@@ -52,8 +52,9 @@ macro(find_package_and_print_version PACKAGE_NAME)
 endmacro()
 
 # Find the HIP Package
-find_package_and_print_version(HIP 1.0)
+find_package_and_print_version(HIP)
 
+include(${ROCM_PATH}/lib64/cmake/hip/FindHIP.cmake)
 if(HIP_FOUND)
   set(PYTORCH_FOUND_HIP TRUE)
   set(FOUND_ROCM_VERSION_H FALSE)
@@ -128,13 +129,13 @@ if(HIP_FOUND)
   message("TORCH_HIP_VERSION: ${TORCH_HIP_VERSION}")
 
   message("\n***** Library versions from dpkg *****\n")
-  execute_process(COMMAND dpkg -l COMMAND grep rocm-dev COMMAND awk "{print $2 \" VERSION: \" $3}")
-  execute_process(COMMAND dpkg -l COMMAND grep rocm-libs COMMAND awk "{print $2 \" VERSION: \" $3}")
-  execute_process(COMMAND dpkg -l COMMAND grep hsakmt-roct COMMAND awk "{print $2 \" VERSION: \" $3}")
-  execute_process(COMMAND dpkg -l COMMAND grep rocr-dev COMMAND awk "{print $2 \" VERSION: \" $3}")
-  execute_process(COMMAND dpkg -l COMMAND grep -w hcc COMMAND awk "{print $2 \" VERSION: \" $3}")
-  execute_process(COMMAND dpkg -l COMMAND grep hip-base COMMAND awk "{print $2 \" VERSION: \" $3}")
-  execute_process(COMMAND dpkg -l COMMAND grep hip_hcc COMMAND awk "{print $2 \" VERSION: \" $3}")
+#  execute_process(COMMAND dpkg -l COMMAND grep rocm-dev COMMAND awk "{print $2 \" VERSION: \" $3}")
+#  execute_process(COMMAND dpkg -l COMMAND grep rocm-libs COMMAND awk "{print $2 \" VERSION: \" $3}")
+#  execute_process(COMMAND dpkg -l COMMAND grep hsakmt-roct COMMAND awk "{print $2 \" VERSION: \" $3}")
+#  execute_process(COMMAND dpkg -l COMMAND grep rocr-dev COMMAND awk "{print $2 \" VERSION: \" $3}")
+#  execute_process(COMMAND dpkg -l COMMAND grep -w hcc COMMAND awk "{print $2 \" VERSION: \" $3}")
+#  execute_process(COMMAND dpkg -l COMMAND grep hip-base COMMAND awk "{print $2 \" VERSION: \" $3}")
+#  execute_process(COMMAND dpkg -l COMMAND grep hip_hcc COMMAND awk "{print $2 \" VERSION: \" $3}")
 
   message("\n***** Library versions from cmake find_package *****\n")
 
diff --git a/third_party/sleef.BUILD b/third_party/sleef.BUILD
index f22a6e905e..8eee89d689 100644
--- a/third_party/sleef.BUILD
+++ b/third_party/sleef.BUILD
@@ -173,12 +173,12 @@ genrule(
 genrule(
     name = "sleef_h",
     srcs = [
-        "src/libm/sleeflibm_header.h.org.in",
+        "src/libm/sleeflibm_header.h.org",
         "src/libm/sleeflibm_footer.h.org",
     ],
     outs = ["build/include/sleef.h"],
     cmd = "{ " + "; ".join([
-        "cat $(location src/libm/sleeflibm_header.h.org.in)",
+        "cat $(location src/libm/sleeflibm_header.h.org)",
         "$(location :mkrename) cinz_ 2 4 __m128d __m128 __m128i __m128i __SSE2__",
         "$(location :mkrename) cinz_ 2 4 __m128d __m128 __m128i __m128i __SSE2__ sse2",
         "$(location :mkrename) cinz_ 2 4 __m128d __m128 __m128i __m128i __SSE2__ sse4",

